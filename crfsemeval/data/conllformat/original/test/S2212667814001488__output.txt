This	O 0 4
paper	O 5 10
presents	O 11 19
general	O 20 27
results	O 28 35
on	O 36 38
the	O 39 42
Java	B-T 43 47
source	I-T 48 54
code	I-T 55 59
snippet	I-T 60 67
detection	I-T 68 77
problem.	O 78 85

We	O 87 89
propose	O 90 97
the	O 98 101
tool	O 102 106
which	O 107 112
uses	O 113 117
graph	B-P 118 123
and	I-P 124 127
subgraph	I-P 128 136
isomorphism	I-P 137 148
detection.	I-P 149 158

A	O 160 161
number	O 162 168
of	O 169 171
solutions	O 172 181
for	O 182 185
all	O 186 189
of	O 190 192
these	O 193 198
tasks	O 199 204
have	O 205 209
been	O 210 214
proposed	O 215 223
in	O 224 226
the	O 227 230
literature.	O 231 241

However,	O 243 250
although	O 252 260
that	O 261 265
all	O 266 269
these	O 270 275
solutions	O 276 285
are	O 286 289
really	O 290 296
fast,	O 297 301
they	O 303 307
compare	B-P 308 315
just	I-P 316 320
the	I-P 321 324
constant	I-P 325 333
static	I-P 334 340
trees.	I-P 341 346

Our	O 348 351
solution	O 352 360
offers	O 361 367
to	O 368 370
enter	B-P 371 376
an	I-P 377 379
input	I-P 380 385
sample	I-P 386 392
dynamically	I-P 393 404
with	O 405 409
the	O 410 413
Scripthon	B-M 414 423
language	I-M 424 432
while	O 433 438
preserving	B-P 439 449
an	I-P 450 452
acceptable	I-P 453 463
speed.	I-P 464 469

We	O 471 473
used	O 474 478
several	B-P 479 486
optimizations	I-P 487 500
to	O 501 503
achieve	O 504 511
very	O 512 516
low	O 517 520
number	O 521 527
of	O 528 530
comparisons	B-P 531 542
during	O 543 549
the	O 550 553
matching	B-P 554 562
algorithm.	I-P 563 572

